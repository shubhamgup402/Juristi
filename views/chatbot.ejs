<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Juristi | Register</title>
    <!-- Favicons -->
    <link href="assets/img/favicon.png" rel="icon">
    <link href="assets/img/apple-touch-icon.png" rel="apple-touch-icon">

    <!-- Fonts -->
    <link href="https://fonts.googleapis.com" rel="preconnect">
    <link href="https://fonts.gstatic.com" rel="preconnect" crossorigin>
    <link
        href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
        rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">

    <!-- CSS Files -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Grey+Qo&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/aos/2.3.4/aos.css" />
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <style>
        body {
            overflow: hidden;
            background-color: #0a0b0c;
        }

        .fade-in {
            opacity: 0;
            animation: fadeIn 0.5s ease-in forwards;
        }

        @keyframes fadeIn {
            to {
                opacity: 1;
            }
        }

        .container {
            max-width: 600px;
        }

        .shadow-custom {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .bg-custom {
            background-color: #f8f9fa;
        }

        .input-group {
            border-radius: 0.25rem;

        }

        .btn-custom {
            border-radius: 0.25rem;
        }

        .placeholder-custom::placeholder {
            color: #6c757d;
        }
    </style>
</head>

<body>
    <div class="container mt-4">
        <h2 class="text-center text-white font-weight-bold mb-4">Juristi Chatbot <i class="bi bi-robot"></i></h2>
        <div id="resultContainer" class="mt-4 p-4 bg-white rounded shadow-custom">
            <div id="startMessage" class="fade-in text-lg bg-custom p-3 rounded">
                Hello! I’m your AI assistant. How can I help you today?
            </div>
        </div>

        <div class="input-group mt-4">
            <input type="text" id="promptInput" class="form-control rounded-left border-0 bg-light placeholder-custom"
                placeholder="Enter prompt..." />
            <div class="input-group-append">
                <button id="generateBtn" class="btn btn-primary btn-custom">
                    Generate
                </button>
            </div>
        </div>
        </div>


        <script>
            document.getElementById('generateBtn').addEventListener('click', async () => {
                const promptInput = document.getElementById('promptInput').value;
                const resultContainer = document.getElementById('resultContainer');

                if (!promptInput) return;

                // Clear the input field
                document.getElementById('promptInput').value = '';

                // Display a loading message
                const loadingMessage = document.createElement('p');
                loadingMessage.innerText = 'Generating response...';
                loadingMessage.classList.add('text-gray-500', 'italic', 'mb-2', 'fade-in');
                resultContainer.appendChild(loadingMessage);
                resultContainer.scrollTop = resultContainer.scrollHeight;

                try {
                    const response = await fetch('/generate', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ prompt: promptInput })
                    });

                    const data = await response.json();

                    // Remove the loading message
                    resultContainer.removeChild(loadingMessage);

                    // Create a new div for the request-response pair
                    const requestResponsePair = document.createElement('div');
                    requestResponsePair.classList.add('request-response-pair', 'flex', 'flex-col', 'mb-4', 'fade-in');

                    // Create and append the request element
                    const requestElem = document.createElement('div');
                    requestElem.classList.add('request', 'flex', 'justify-end', 'mb-2');
                    requestElem.innerHTML = `<p class="text-2xl whitespace-pre-line max-w-[900px] w-fit bg-blue-100 p-2 rounded-lg text-end">${promptInput}</p>`;
                    requestResponsePair.appendChild(requestElem);

                    // Parse the response to remove asterisks and hashes, and bold titles
                    let parsedResponse = data.result || data.error;
                    parsedResponse = parsedResponse
                        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')  // Bold **text**
                        .replace(/^\* /gm, '• ')                          // Convert * to bullet point
                        .replace(/^## /gm, '')                            // Remove ## from headings
                        .replace(/^# /gm, '')                             // Remove # from headings
                        .replace(/^- /gm, '• ');                          // Convert - to bullet point

                    // Create and append the response element
                    const responseElem = document.createElement('div');
                    responseElem.classList.add('response', 'flex', 'justify-start', 'mb-2');
                    responseElem.innerHTML = `<p class="text-1xl whitespace-pre-line max-w-[900px] w-fit bg-gray-100 p-2 rounded-lg">${parsedResponse}</p>`;
                    requestResponsePair.appendChild(responseElem);

                    // Append the new pair to the container
                    resultContainer.appendChild(requestResponsePair);

                    // Scroll to the bottom of the result container
                    resultContainer.scrollTop = resultContainer.scrollHeight;

                } catch (error) {
                    console.error('Error generating response:', error);
                    resultContainer.removeChild(loadingMessage);

                    const errorElem = document.createElement('p');
                    errorElem.classList.add('text-red-500');
                    errorElem.innerText = 'Error generating response.';
                    resultContainer.appendChild(errorElem);
                }
            });
        </script>
</body>

</html>